package com.example.amir.carproject;

import android.content.pm.ActivityInfo;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.MotionEvent;
import android.widget.ImageButton;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.bluetooth.BluetoothSocket;
import android.content.Intent;
import android.view.View;
import android.widget.TextView;
import android.widget.Toast;
import android.app.ProgressDialog;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.os.AsyncTask;
import java.io.IOException;
import java.util.UUID;
import android.view.View.OnClickListener ;

import org.w3c.dom.Text;

public class Modes extends AppCompatActivity {

    public static Boolean Begin=true;
    private ImageButton EazyDriving;
    private ImageButton LineTracking;
    private ImageButton AccurateDriving;
    private ImageButton Disconnect;
    private TextView ModesText;
    private String address = null;
    private ProgressDialog progress;
    private BluetoothAdapter myBluetooth = null;
    public static BluetoothSocket btSocket = null;
    private boolean isBtConnected = false;
    private static final UUID myUUID = UUID.fromString("00001101-0000-1000-8000-00805F9B34FB");

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        getSupportActionBar().hide(); // hide action bar when the app is working
        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);// force app to open in landscape mode

        setContentView(R.layout.activity_modes);

        // excute the connction class
        if(Begin){
            //receive the address of the bluetooth device
            Intent newint = getIntent();
            address = newint.getStringExtra("Address");
        new ConnectBT().execute();
        }

        ModesText=(TextView)findViewById(R.id.ModesText);
        EazyDriving=(ImageButton)findViewById(R.id.EazyDriving);
        LineTracking=(ImageButton)findViewById(R.id.LineTracking);
        AccurateDriving=(ImageButton)findViewById(R.id.AccurateDriving);
        Disconnect=(ImageButton)findViewById(R.id.Disconnect);

        Disconnect.setOnClickListener(new View.OnClickListener(){

            @Override
            public void onClick(View view) {
                Disconnect();
            }
        });

        EazyDriving.setOnClickListener(new View.OnClickListener(){

            @Override
            public void onClick(View v)
            {
                Send("E");
                msg("Easy Driving");
                Intent i= new Intent(Modes.this,EasyDriving.class);
                startActivity(i);
            }
        });

        AccurateDriving.setOnClickListener(new View.OnClickListener(){

            @Override
            public void onClick(View v)
            {
                Send("A");
                msg("Accurate Driving");
                Intent i= new Intent(Modes.this,AccurateDriving.class);
                startActivity(i);
            }
        });

        LineTracking.setOnClickListener(new View.OnClickListener(){

            @Override
            public void onClick(View v)
            {
                Send("l");
                msg("Line Tracking");

            }
        });


    }


    private class ConnectBT extends AsyncTask<Void, Void, Void>  // UI thread
    {
        private boolean ConnectSuccess = true; //if it's here, it's almost connected

        @Override
        protected void onPreExecute() {
            progress = ProgressDialog.show(Modes.this, "Connecting...", "Please wait!!!");  //show a progress dialog
        }

        @Override
        protected Void doInBackground(Void... devices) //while the progress dialog is shown, the connection is done in background
        {
            try {
                if (btSocket == null || !isBtConnected) {
                    myBluetooth = BluetoothAdapter.getDefaultAdapter();//get the mobile bluetooth device
                    BluetoothDevice dispositivo = myBluetooth.getRemoteDevice(address);//connects to the device's address and checks if it's available
                    btSocket = dispositivo.createInsecureRfcommSocketToServiceRecord(myUUID);//create a RFCOMM (SPP) connection
                    BluetoothAdapter.getDefaultAdapter().cancelDiscovery();
                    btSocket.connect();//start connection
                }
            } catch (IOException e) {
                ConnectSuccess = false;//if the try failed, you can check the exception here
            }
            return null;
        }

        @Override
        protected void onPostExecute(Void result) //after the doInBackground, it checks if everything went fine
        {
            super.onPostExecute(result);

            if (!ConnectSuccess) {
                msg("Connection Failed. Is it a SPP Bluetooth? Try again.");
             //   finish();
            } else {
                msg("Connected.");
                isBtConnected = true;
            }
            progress.dismiss();
        }

    }

    // method to show message
    private void msg(String s)
    {
        Toast.makeText(getApplicationContext(),s,Toast.LENGTH_SHORT).show();
    }
    // method called when the disconnect button is clicked to end connection and return to first Activity
    private void Disconnect()
    {
        if (btSocket!=null) //If the btSocket is busy
        {
            try
            {
                btSocket.close(); //close connection
                Intent i=new Intent(Modes.this,ConnectionActivity.class);
                startActivity(i);

            }
            catch (IOException e)
            { msg("Error");}
        }
        finish(); //return to the first layout
    }


    private void Send (String s) {
        if (btSocket != null) {
            try {
                btSocket.getOutputStream().write(s.getBytes());
            } catch (IOException e) {
                msg("Error");
            }
        }

    }





    }
