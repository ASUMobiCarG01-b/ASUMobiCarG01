package asumobicarg28.carcontrolproject;

import android.content.pm.ActivityInfo;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.MotionEvent;
import android.widget.ImageButton;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.bluetooth.BluetoothSocket;
import android.content.Intent;
import android.view.View;
import android.widget.TextView;
import android.widget.Toast;
import android.app.ProgressDialog;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.os.AsyncTask;
import java.io.IOException;
import java.util.UUID;
import android.view.View.OnClickListener ;

import org.w3c.dom.Text;

public class CarControlActivity extends AppCompatActivity {
    private ImageButton Arrows[] = new ImageButton[8];
    private Direction DirectionArrows[] = new Direction[8];
    private ImageButton Disconnect ;
    private RadioGroup SpeedSelector ;
    private RadioGroup CarModes;
    private String address = null;
    private ProgressDialog progress;
    private BluetoothAdapter myBluetooth = null;
    private BluetoothSocket btSocket = null;
    private boolean isBtConnected = false;
    private static final UUID myUUID = UUID.fromString("00001101-0000-1000-8000-00805F9B34FB");
    private TextView Text;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        getSupportActionBar().hide(); // hide action bar when the app is working
        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);// force app to open in landscape mode
        //receive the address of the bluetooth device
        Intent newint = getIntent();
        address = newint.getStringExtra("Address");
        // excute the connction class
          new ConnectBT().execute();
        //view of the ledControl layout
        setContentView(R.layout.activity_car_control);

        // call the ImageButtons by id
        Arrows[0]=(ImageButton)findViewById(R.id.ForwardButton);
        Arrows[1]=(ImageButton)findViewById(R.id.ForwardRightButton);
        Arrows[2]=(ImageButton)findViewById(R.id.RightButton);
        Arrows[3]=(ImageButton)findViewById(R.id.BackwardRightButton);
        Arrows[4]=(ImageButton)findViewById(R.id.BackwardButton);
        Arrows[5]=(ImageButton)findViewById(R.id.BackwardLeftButton);
        Arrows[6]=(ImageButton)findViewById(R.id.LeftButton);
        Arrows[7]=(ImageButton)findViewById(R.id.forwardLeftButton);

        // put the image buttons in the directionsArrows object

        DirectionArrows[0]=new Direction(Arrows[0],"F","Forward");
        DirectionArrows[1]=new Direction(Arrows[1],"FR","Forward Right");
        DirectionArrows[2]=new Direction(Arrows[2],"R","Right");
        DirectionArrows[3]=new Direction(Arrows[3],"BR","Backward Right");
        DirectionArrows[4]=new Direction(Arrows[4],"B","Backward");
        DirectionArrows[5]=new Direction(Arrows[5],"BL","Backward Left");
        DirectionArrows[6]=new Direction(Arrows[6],"L","Left");
        DirectionArrows[7]=new Direction(Arrows[7],"FL","Forward Left");


        // call the text view
        Text=(TextView)findViewById(R.id.textView);
        Text.setText("Please Select Mode");

        //call the RadioFroups
        SpeedSelector=(RadioGroup)findViewById(R.id.SpeedSelector) ;
        CarModes=(RadioGroup)findViewById(R.id.ModeSelector) ;

        // method to set the car mode
        CarModes.setOnCheckedChangeListener(
                new RadioGroup.OnCheckedChangeListener() {
                    @Override
                    public void onCheckedChanged(RadioGroup radioGroup, int i) {

                        if (R.id.BluetoothMode == i) {
                            // if blutooth mode enabled these are function to operate car
                            DirectionArrows[0].Touch();
                            DirectionArrows[1].Touch();
                            DirectionArrows[2].Touch();
                            DirectionArrows[3].Touch();
                            DirectionArrows[4].Touch();
                            DirectionArrows[5].Touch();
                            DirectionArrows[6].Touch();
                            DirectionArrows[7].Touch();
                            Send("B");
                            msg("Bluetooth Mode");
                        }

                        if (R.id.LineTrackingMode == i) {
                            Send("L");
                            msg("Line Tracking Mode");
                        }
                        if (R.id.MazeMode == i) {
                            Send("M");
                            msg("Maze Solving Mode");
                        }
                         Text.setText("PLZ select Speed");
                    }
                }
        );

        // method called whem cheching speed radio buttons

        SpeedSelector.setOnCheckedChangeListener(
                new RadioGroup.OnCheckedChangeListener() {
                    @Override
                    public void onCheckedChanged(RadioGroup radioGroup, int i) {
                        if (R.id.LowSpeed == i){
                            Send("LS");
                            msg("Low Speed");
                        }
                        if (R.id.MediamSpeed == i){
                            Send("MS");
                            msg("Medium Speed");

                        }
                        if (R.id.HighSpeed == i){
                            Send("HS");
                            msg("High Speed");

                        }
                        Text.setText("Start");
                    }
                }
        );


        Disconnect = (ImageButton)findViewById(R.id.DiscconectButton) ;
        // when clicking Disconnect button
        Disconnect.setOnClickListener(new View.OnClickListener()
        {
            @Override
            public void onClick(View v)
            {
                Disconnect(); //close connection
            }
        });



    }

    private class ConnectBT extends AsyncTask<Void, Void, Void>  // UI thread
    {
        private boolean ConnectSuccess = true; //if it's here, it's almost connected

        @Override
        protected void onPreExecute() {
            progress = ProgressDialog.show(CarControlActivity.this, "Connecting...", "Please wait!!!");  //show a progress dialog
        }

        @Override
        protected Void doInBackground(Void... devices) //while the progress dialog is shown, the connection is done in background
        {
            try {
                if (btSocket == null || !isBtConnected) {
                    myBluetooth = BluetoothAdapter.getDefaultAdapter();//get the mobile bluetooth device
                    BluetoothDevice dispositivo = myBluetooth.getRemoteDevice(address);//connects to the device's address and checks if it's available
                    btSocket = dispositivo.createInsecureRfcommSocketToServiceRecord(myUUID);//create a RFCOMM (SPP) connection
                    BluetoothAdapter.getDefaultAdapter().cancelDiscovery();
                    btSocket.connect();//start connection
                }
            } catch (IOException e) {
                ConnectSuccess = false;//if the try failed, you can check the exception here
            }
            return null;
        }

        @Override
        protected void onPostExecute(Void result) //after the doInBackground, it checks if everything went fine
        {
            super.onPostExecute(result);

            if (!ConnectSuccess) {
                msg("Connection Failed. Is it a SPP Bluetooth? Try again.");
                finish();
            } else {
                msg("Connected.");
                isBtConnected = true;
            }
            progress.dismiss();
        }

    }

// method to show message
    private void msg(String s)
    {
        Toast.makeText(getApplicationContext(),s,Toast.LENGTH_LONG).show();
    }
// method called when the disconnect button is clicked to end connection and return to first Activity
    private void Disconnect()
    {
        if (btSocket!=null) //If the btSocket is busy
        {
            try
            {
                btSocket.close(); //close connection
            }
            catch (IOException e)
            { msg("Error");}
        }
        finish(); //return to the first layout
    }


    public void Send (String s){
        if (btSocket!=null)
        {
            try
            {
                btSocket.getOutputStream().write(s.getBytes());
            }
            catch (IOException e)
            {
                msg("Error");
            }
        }

    }


    // direction Class to handle all the direction buttons

    public class Direction {
        private ImageButton DirectionArrow;
        private String SendText;
        private String TextF;
        private int index ;

        public Direction(ImageButton B,String S,String T) {
            DirectionArrow = B;
            SendText=S;
            TextF=T;
        }
        public void settext(String s){
            TextF=s;
        }
        public void setSendText (String s){
            SendText=s;
        }
        // class to handle arrows buttons
        public void Touch() {
            DirectionArrow.setOnTouchListener(
                    new View.OnTouchListener() {
                        @Override
                        public boolean onTouch(View view, MotionEvent motionEvent) {
                            switch (motionEvent.getAction()) {
                                case MotionEvent.ACTION_DOWN:
                                    view.setPressed(true);

                                    if (btSocket!=null)
                                    {
                                        try
                                        {
                                            btSocket.getOutputStream().write(SendText.getBytes());
                                        }
                                        catch (IOException e)
                                        {
                                            msg("Error");
                                        }
                                    }
                                    Text.setText(TextF);
                                    return true;
                                case MotionEvent.ACTION_UP:
                                case MotionEvent.ACTION_CANCEL:
                                    view.setPressed(false);
                                    if (btSocket!=null)
                                    {
                                        try
                                        {
                                            btSocket.getOutputStream().write("0".getBytes());
                                        }
                                        catch (IOException e)
                                        {
                                            msg("Error");
                                        }
                                    }
                                    Text.setText("Stop!");
                                    return true;
                            }
                            return false;
                        }
                    }
            );

        }
    }




}

